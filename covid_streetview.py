#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Ethan Frier
Streetview Covid19 Visualizer
ATLS 1300-5650 Final Project 
December 2020

This script downloads streetview images from google maps static street view 
api based on location data from the New York Times Covid19 github repo. 

Humans respond most effectivly to emotion as compared to information. In fact 
too much information, regardless of quality or source, can sometimes have an 
adverse effect. The goal of this project is to put these data into context.
By displaying a limited ammount of high quality and recent data in an more 
human context, the hope is that this piece will make these data more digestable.

The most recent US covid data by county is retrieved from the New York Times 
repo - https://github.com/nytimes/covid-19-data . The data is then sorted by 
the total number of cases by county and outputs today's top counties to a list. 
Each list index contains a text string of 'County,State'. In order to best 
communicate with the streetview api, this data is converted to 
'latitude,longitude' coordinates using the geopy library.

The NYT data is managed by the NYTCovidData class, which was modified from 
TowardsDataScience.com - https://towardsdatascience.com/analyze-ny-times-covid-19-dataset-86c802164210
I copied and modified the methods: today(), updateCounty(), dateUpdate(),
process(), as well as 5 lines from __init__() : 34 lines

Future Improvements:
    
The top counties by raw case numbers are invariably almost all large cities. 
I would like to modify this script further to sort by the highest number of 
cases per capita. This will return the case rate, not the total number of cases. 
The rate is a more effective way of looking at the velocity and impact of the
virus, and more accurately highlights the effect on less populous areas, which 
are currently the hardest hit. This requires a dataset with each county's 
population to compare total cases against. I'm not sure where to find best 
or cleanest data for 1,929 counties, or if I should use the FIPS system?

The images are just downloaded to a pre-existing generic folder. I want to 
add a function to create a new folder for each date. This folder will contain 
the images, as well as a csv file generated by the function containing the 
original 'County,State' string, the new 'lat,lon' string, as well as the 
address text string generated by geopy.

Eventually, I would like to make this into a live viewer of the images which 
will display on screen a tiled montage of the images from the top counties by
case rate, with the address text and current covid data overlaid. The rate at
which the images update is realtive to the current national caseload.

"""

# import csv
import urllib
import os
import pandas
import requests 
import io
import time
import datetime
import geopy


# url for NYT counties raw data csv
NYTcountiesData = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"

# list to store sorted and processed location data from NYTCodivData()
locations = []
 
# api key stored in keys.txt (git ignore)
keyDoc = open('keys.txt', 'r')
apiKey = keyDoc.read()
printKeyA, printKeyB = apiKey[0:5],apiKey[-6:-1]
print(f'Recieved API key: {printKeyA}..{printKeyB}')

# folder to download streetview images
localFolder = '/Users/ethanfrier/Desktop/covid19_streetview/downloadImages/'

headings = [0, 180]
fov = 90
radius = 100000


class NYTCovidData:
    def __init__(self):
        from datetime import date
        self._today = date.today()
        self.numCounties = 12
        self.topCounties = []
        self.countydf = None
        self._countyupdated = False
        self._processed = False
        self._sorted = False
    
    
    def today(self):
        print("Today's date is: ",self._today)
        
        
    def updateCounty(self, url=NYTcountiesData):
        '''
        Retrieves most recent data from New York Times Covid19 github repository. 
        Stores data in self.countydf panda data frame. 
        '''
        url = NYTcountiesData
        s=requests.get(url).content
        self.countydf = pandas.read_csv(io.StringIO(s.decode('utf-8')))
        self.countydf['date'] =  pandas.to_datetime(self.countydf['date'], format='%Y-%m-%d')
        self._countyupdated = True
    
    
    def dateUpdate(self):
        '''
        Checks that updateCounty() has been run, then displays date of most
        recent data.
        '''
        if self._countyupdated:
            print("Most recent data:",self.countydf.iloc[-1]['date'].date())
        else:
            print("Data has not been updated!")
       
        
    def process(self):
        '''
        Creates a dictionary to store data from data frame countydf. Creates a
        list of all counties, and uses it to traverse countydf data. Calculates
        new cases and new deaths using the difference in numbers by day in 
        each county in the list. Usually takes 60-120 seconds to run. 
        '''
        pandas.set_option('mode.chained_assignment', None)
        self.countydict= {}
        t1 = time.time()
        if self._countyupdated:
            self.countylist = list(self.countydf['county'].unique())
            print(f'Processing {str(len(self.countylist))} counties...')
            
            for c in self.countylist:
                county_df=self.countydf[self.countydf['county']==c]
                county_df['newcases'] = county_df['cases'].diff()
                county_df['newdeaths'] = county_df['deaths'].diff()
                self.countydict[c]=county_df
        
        self._processed = True
        t2 = time.time()
        delt = round(t2-t1,3)
        print("Finished. Took {} seconds".format(delt))
            
        
    def sortByCases(self):
        '''
        Checks that process() has been run. Sorts counties by data, then total 
        cases in descending order.
        '''
        if self._processed:
            print('Sorted by recent number of cases per county.')
            self.countydf = self.countydf.sort_values(by=['date','cases'], ascending=False)
            self._sorted = True
                
            
    def getTopCounties(self):
        '''
        Stores sorted data into a list limited to numCounties and prints the 
        location (county,state) to the terminal.
        '''
        if self._sorted:       
            for c in range(self.numCounties):
                county_ = self.countydf.iloc[c]['county']
                state_ = self.countydf.iloc[c]['state']
                location_ = str(f'{county_},{state_}')
                self.topCounties.append(location_)
           
            print(f'Top {covid.numCounties} counties by total cases:')
            for location in covid.topCounties:
                print(f'   {location}')



def getStreetView(lat_, lon_, heading_, fileName_, saveFolder_):
    '''This function creates a URL with parameters for each image, 
    and downloads image using streetview static api ''' 
    
    # assign parameters for image request
    base = r'https://maps.googleapis.com/maps/api/streetview?'
    imageSize = r'&size=640x500'    # max free size is 640x640
    imageLocation = r'&location={0},{1}'.format(lat_, lon_)
    imageHeading = r'&fov={0}&heading={1}'.format(fov, heading_)
    searchRadius = r'&radius={0}'.format(radius)
    useAPI = r'&key={0}'.format(apiKey)
   
    # create URL, request image, and download to localFolder
    myUrl = base + imageSize + imageLocation + imageHeading + searchRadius + useAPI 
    urllib.request.urlretrieve(myUrl, os.path.join(saveFolder_,fileName_))
   

def makeLatLon():
    '''
    Uses geopy library to convert the county,state string from NYTCovid into 
    a latitude and longitude. Also converts string into a nicer address text 
    string which is stored in locationText. 
    '''
    from geopy.geocoders import Nominatim
    geolocator = Nominatim(user_agent="covid_streetview")

    for l in covid.topCounties:
        convertLocation = geolocator.geocode(l)
        locationText = convertLocation.address
        latLon = (convertLocation.latitude,convertLocation.longitude)
        locations.append(latLon)
        print(latLon)


def execute():
    '''
    for each location, format file and download street view image for each heading
    '''
    global numImages
    numImages = 0
    curRow = 1

    for location in locations:
        for heading in headings:
            # extract the lat and lon data from tuple in list
            lat, lon = location
            
            # define file name for saved image
            filename = "{0}_{1}_lat{2}_lon{3}.jpg".format(str(curRow).zfill(3), heading, lat, lon,)
            
            # download street view images
            getStreetView(lat, lon, heading, filename, localFolder)  
            print(f'   Got {filename}')
            
            numImages += 1
            
        curRow += 1
      
                      
covid = NYTCovidData()

covid.today()
covid.updateCounty()
covid.dateUpdate()

covid.process()
covid.sortByCases()
covid.getTopCounties()
        
makeLatLon()      
execute()

    
# downloads complete, print number of images processed    
print(f'Processed {str(numImages)} images.')
print('Done.')

